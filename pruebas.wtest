import muros.*
import wollok.game.*
import jugador.*
import puntos.*
import niveles.*
import miscelaneos.*
import menus.*
import enemigos.*

describe "Group of tests for the player" {
  
const jugador = new Jugador(valor = datosJugador.imagen())

  method initialize(){
    game.clear()
    game.cellSize(40)
    game.height(18)
    game.width(18)
    game.start()
    
    jugador.posicionate()
  }

  test "Player spaw is correct" {
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Player collides to the left wall"{
    jugador.position(game.at(0, 1))
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Player collides to the right wall"{
    jugador.position(game.at(20, 1))
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Player collides to the top wall"{
    jugador.position(game.at(1, 20))
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Player collides to the bottom wall"{
    jugador.position(game.at(1, 0))
    assert.equals(game.at(1, 1), jugador.position())
  }

  test "Should place a block"{
    game.addVisual(new Bloque(position = game.at(4, 1)))
    modificadorMapa.modBloques(moverDerecha)
    assert.that(niveles.mismaPosicion(game.at(2, 1)) && 
                !(niveles.mismaPosicion(game.at(5, 1))))
  }

  test "Should remove a block"{
    game.addVisual(new Bloque(position = game.at(2, 1)))
    game.addVisual(new Bloque(position = game.at(4, 1)))
    modificadorMapa.modBloques(moverDerecha)
    assert.notThat(!(niveles.mismaPosicion(game.at(2, 1))) &&
                    (niveles.mismaPosicion(game.at(4, 1))))
  }
}

describe "Group of test for the enemy" {

  method initialize(){
    game.clear()
    game.cellSize(40)
    game.height(18)
    game.width(18)
    game.start()
  }

  test "Should move"{
    const posicion_base = game.at(1, 2)
    const enemy = new Enemigo1(vida = 100)
    game.addVisual(enemy)
    enemy.nuevaPosicion()
    assert.notThat(posicion_base == enemy.position())
  }

  test "Should died" {
    const enemy = new Enemigo1(vida = 100, position = game.at(1, 1))
    enemy.herido()
    enemy.herido()
    assert.equals(enemy.vida(), 0)
  }
}